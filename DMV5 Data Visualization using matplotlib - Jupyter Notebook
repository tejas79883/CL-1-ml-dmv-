{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cc62867f-f59a-4e5b-85ec-c6b31df6293f",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (941053760.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[1], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    import pandas as pd\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    " import pandas as pd\n",
    " import matplotlib.pyplot as plt\n",
    " import seaborn as sns\n",
    " from sklearn.impute import SimpleImputer\n",
    " %matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d5b0d1d7-4926-48dc-a66e-9418ff4480d3",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "'(' was never closed (524210766.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[3], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    aqi = pd.read_csv(\"City_Air_Quality.csv\", encoding = \"ISO-8859-1\", parse_dat\u001b[0m\n\u001b[1;37m                     ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m '(' was never closed\n"
     ]
    }
   ],
   "source": [
    "aqi = pd.read_csv(\"City_Air_Quality.csv\", encoding = \"ISO-8859-1\", parse_dat\n",
    " aqi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0f215510-42e6-48be-84ee-531c060b31fe",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'sns' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[5], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m sns\u001b[38;5;241m.\u001b[39mset(style\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mticks\u001b[39m\u001b[38;5;124m\"\u001b[39m, rc \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfigure.figsize\u001b[39m\u001b[38;5;124m'\u001b[39m:(\u001b[38;5;241m20\u001b[39m,\u001b[38;5;241m15\u001b[39m)})\n\u001b[0;32m      2\u001b[0m \u001b[38;5;66;03m# Supressing update warnings\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mwarnings\u001b[39;00m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'sns' is not defined"
     ]
    }
   ],
   "source": [
    "\n",
    " sns.set(style=\"ticks\", rc = {'figure.figsize':(20,15)})\n",
    " # Supressing update warnings\n",
    " import warnings\n",
    " warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b2d8d43f-abc1-45ee-9aae-1f2a94ace450",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'aqi' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[7], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# checking the original dataset\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m \u001b[38;5;28mprint\u001b[39m(aqi\u001b[38;5;241m.\u001b[39misnull()\u001b[38;5;241m.\u001b[39msum())\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(aqi\u001b[38;5;241m.\u001b[39mshape)\n\u001b[0;32m      4\u001b[0m aqi\u001b[38;5;241m.\u001b[39minfo()\n",
      "\u001b[1;31mNameError\u001b[0m: name 'aqi' is not defined"
     ]
    }
   ],
   "source": [
    " # checking the original dataset\n",
    " print(aqi.isnull().sum())\n",
    " print(aqi.shape)\n",
    " aqi.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d9e34ccd-fb85-4a63-b908-99d0c07b8698",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (3793952418.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[9], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    aqi.drop(['stn_code', 'agency', 'sampling_date', 'location_monitoring_statio\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "# Cleaning up the data\n",
    " aqi.drop(['stn_code', 'agency', 'sampling_date', 'location_monitoring_statio\n",
    " aqi = aqi.dropna(subset=['date']) # dropping rows where no date is available\n",
    " # cleaning up name changes\n",
    " aqi.state = aqi.state.replace({'Uttaranchal':'Uttarakhand'})\n",
    " aqi.state[aqi.location == \"Jamshedpur\"] = aqi.state[aqi.location == 'Jamshed\n",
    " #changing types to uniform format\n",
    " types = {\n",
    " \"Residential\": \"R\",\n",
    " \"Residential and others\": \"RO\",\n",
    " \"Residential, Rural and other Areas\": \"RRO\",\n",
    " \"Industrial Area\": \"I\",\n",
    " \"Industrial Areas\": \"I\",\n",
    " \"Industrial\": \"I\",\n",
    " \"Sensitive Area\": \"S\",\n",
    " \"Sensitive Areas\": \"S\",\n",
    " \"Sensitive\": \"S\",\n",
    " np.nan: \"RRO\"\n",
    " }\n",
    " aqi.type = aqi.type.replace(types)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5cfd7079-e070-404f-a03d-1275042549ca",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'aqi' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[11], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m aqi\u001b[38;5;241m.\u001b[39mhead()\n",
      "\u001b[1;31mNameError\u001b[0m: name 'aqi' is not defined"
     ]
    }
   ],
   "source": [
    "aqi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bf6086f5-d5de-4224-8555-76a2a2a11915",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    " # defining columns of importance, which shall be used reguarly\n",
    " VALUE_COLS = ['so2', 'no2', 'rspm', 'spm', 'pm2_5']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "92c83b2c-f19c-445a-b71a-6011c548c511",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (3320127575.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[15], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    imputer = SimpleImputer(missing_values=np.nan, strategy='mean')\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "# invoking SimpleImputer to fill missing values\n",
    " imputer = SimpleImputer(missing_values=np.nan, strategy='mean')\n",
    " aqi[VALUE_COLS] = imputer.fit_transform(aqi[VALUE_COLS])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1a958800-2637-48c0-a8ea-34d06b36225c",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (1893016672.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[17], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(aqi.isnull().sum())\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "# checking to see if the dataset has any null values left over and the forma\n",
    " print(aqi.isnull().sum())\n",
    " aqi.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4af49142-ffd4-418e-a3b9-a5a1bdfbadcd",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (443593215.py, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[19], line 4\u001b[1;36m\u001b[0m\n\u001b[1;33m    def plot_for_state(state):\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "# defining a function that plots SO2, NO2, RSPM and SPM yearly average level\n",
    " # since data is available monthly, it was resampled to a year and averaged t\n",
    " # years for which no data was collected has not been imputed\n",
    " def plot_for_state(state):\n",
    " fig, ax = plt.subplots(2,2, figsize=(20,12))\n",
    " fig.suptitle(state, size=20)\n",
    " state = aqi[aqi.state == state]\n",
    " state = state.reset_index().set_index('date')[VALUE_COLS].resample('Y').\n",
    " state.so2.plot(legend=True, ax=ax[0][0], title=\"so2\")\n",
    " ax[0][0].set_ylabel(\"so2 (µg/m3)\")\n",
    " ax[0][0].set_xlabel(\"Year\")\n",
    " state.no2.plot(legend=True, ax=ax[0][1], title=\"no2\")\n",
    " ax[0][1].set_ylabel(\"no2 (µg/m3)\")\n",
    " ax[0][1].set_xlabel(\"Year\")\n",
    " state.rspm.plot(legend=True, ax=ax[1][0], title=\"rspm\")\n",
    " ax[1][0].set_ylabel(\"RSPM (PM10 µg/m3)\")\n",
    " ax[1][0].set_xlabel(\"Year\")\n",
    " state.spm.plot(legend=True, ax=ax[1][1], title=\"spm\")\n",
    " ax[1][1].set_ylabel(\"SPM (PM10 µg/m3)\")\n",
    " ax[1][1].set_xlabel(\"Year\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5af1693d-bd38-46db-94d3-d82a44777956",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plot_for_state' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[21], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m plot_for_state(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUttar Pradesh\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'plot_for_state' is not defined"
     ]
    }
   ],
   "source": [
    "plot_for_state(\"Uttar Pradesh\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "87189f61-f9ff-41cc-979f-69b73c89b52e",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block after function definition on line 2 (2283615025.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[23], line 3\u001b[1;36m\u001b[0m\n\u001b[1;33m    fig, ax = plt.subplots(2,1, figsize=(20, 12))\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block after function definition on line 2\n"
     ]
    }
   ],
   "source": [
    " # defining a function to find and plot the top 10 and bottom 10 states for a\n",
    " def top_and_bottom_10_states(indicator=\"so2\"):\n",
    " fig, ax = plt.subplots(2,1, figsize=(20, 12))\n",
    " ind = aqi[[indicator, 'state']].groupby('state', as_index=False).median(\n",
    " top10 = sns.barplot(x='state', y=indicator, data=ind[:10], ax=ax[0], col\n",
    " top10.set_title(\"Top 10 states by {} (1991-2016)\".format(indicator))\n",
    " top10.set_ylabel(\"so2 (µg/m3)\")\n",
    " top10.set_xlabel(\"State\")\n",
    " bottom10 = sns.barplot(x='state', y=indicator, data=ind[-10:], ax=ax[1],\n",
    " bottom10.set_title(\"Bottom 10 states by {} (1991-2016)\".format(indicator\n",
    " bottom10.set_ylabel(\"so2 (µg/m3)\")\n",
    " bottom10.set_xlabel(\"State\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ee1809d1-1bbd-4cd0-93bb-6f7f88bd56a2",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (4117697395.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[25], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    top_and_bottom_10_states(\"no2\")\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "top_and_bottom_10_states(\"so2\")\n",
    " top_and_bottom_10_states(\"no2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e05afc31-ce17-48fd-90e6-e6f1b6576ca6",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (60517712.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[27], line 3\u001b[1;36m\u001b[0m\n\u001b[1;33m    def highest_levels_recorded(indicator=\"so2\"):\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "# defining a function to find the highest ever recorded levels for a given i\n",
    " # sidenote: mostly outliers\n",
    " def highest_levels_recorded(indicator=\"so2\"):\n",
    " plt.figure(figsize=(20,10))\n",
    " ind = aqi[[indicator, 'location', 'state', 'date']].groupby('state', as_\n",
    " highest = sns.barplot(x='state', y=indicator, data=ind)\n",
    " highest.set_title(\"Highest ever {} levels recorded by state\".format(indi\n",
    " plt.xticks(rotation=90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "13da35e4-46fe-4610-8988-286276e533c5",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (1229152679.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[29], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    highest_levels_recorded(\"rspm\")\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "highest_levels_recorded(\"no2\")\n",
    " highest_levels_recorded(\"rspm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "2ead654e-d8e9-4708-928f-661e5abe56de",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 10) (2128680455.py, line 10)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[31], line 10\u001b[1;36m\u001b[0m\n\u001b[1;33m    year_wise = aqi[[indicator, 'year', 'state']].groupby(['state','year\u001b[0m\n\u001b[1;37m                                                                   ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unterminated string literal (detected at line 10)\n"
     ]
    }
   ],
   "source": [
    "# defining a function to plot the yearly trend values for a given indicator \n",
    "def yearly_trend(state=\"\", indicator=\"so2\", ):\n",
    " plt.figure(figsize=(20,12))\n",
    " aqi['year'] = aqi.date.dt.year\n",
    " if state is \"\":\n",
    " year_wise = aqi[[indicator, 'year', 'state']].groupby('year', as_ind\n",
    " trend = sns.pointplot(x='year', y=indicator, data=year_wise)\n",
    " trend.set_title('Yearly trend of {}'.format(indicator))\n",
    " else:\n",
    " year_wise = aqi[[indicator, 'year', 'state']].groupby(['state','year\n",
    " trend = sns.pointplot(x='year', y=indicator, data=year_wise)\n",
    " trend.set_title('Yearly trend of {} for {}'.format(indicator, state)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "769c008c-117e-4c87-bf26-990f7f3a1ec2",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (4096528795.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[33], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    yearly_trend(\"West Bengal\", \"no2\")\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "yearly_trend()\n",
    " yearly_trend(\"West Bengal\", \"no2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "62323f9d-fe8c-4a38-84ad-4f042b8282e1",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (22315407.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[35], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    def indicator_by_state_and_year(indicator=\"so2\"):\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "# defining a function to plot a heatmap for yearly median average for a give\n",
    " def indicator_by_state_and_year(indicator=\"so2\"):\n",
    " plt.figure(figsize=(20, 20))\n",
    " hmap = sns.heatmap(\n",
    " data=aqi.pivot_table(values=indicator, index='state', columns='year'\n",
    " annot=True, linewidths=.5, cbar=True, square=True, cmap='infe\n",
    " hmap.set_title(\"{} by state and year\".format(indicator))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "3c49e434-028a-4845-ae3d-e34a6520406e",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'indicator_by_state_and_year' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[37], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m indicator_by_state_and_year(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mno2\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'indicator_by_state_and_year' is not defined"
     ]
    }
   ],
   "source": [
    "indicator_by_state_and_year('no2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "93b69a7e-1bea-427f-b51b-241aa0d58248",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (130016396.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[39], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    def type_avg(indicator=\"\"):\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "# defining a function to plot pollutant averages by type for a given indicat\n",
    " def type_avg(indicator=\"\"):\n",
    " type_avg = aqi[VALUE_COLS + ['type', 'date']].groupby(\"type\").mean()\n",
    " if indicator is not \"\":\n",
    " t = type_avg[indicator].plot(kind='bar')\n",
    " plt.xticks(rotation = 0)\n",
    " plt.title(\"Pollutant average by type for {}\".format(indicator))\n",
    " else:\n",
    " t = type_avg.plot(kind='bar')\n",
    " plt.xticks(rotation = 0)\n",
    " plt.title(\"Pollutant average by type\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e54814ef-c9a5-4cd2-ba6c-1f8abf915127",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'type_avg' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[41], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m type_avg(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mso2\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'type_avg' is not defined"
     ]
    }
   ],
   "source": [
    "type_avg('so2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "6ac15063-5570-47aa-a72a-43f0a773df36",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block after function definition on line 2 (3795218150.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[43], line 3\u001b[1;36m\u001b[0m\n\u001b[1;33m    locs = aqi[VALUE_COLS + ['state', 'location', 'date']].groupby(['state',\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block after function definition on line 2\n"
     ]
    }
   ],
   "source": [
    " # defining a function to plot pollutant averages for a given indicator (defa\n",
    " def location_avgs(state, indicator=\"so2\"):\n",
    " locs = aqi[VALUE_COLS + ['state', 'location', 'date']].groupby(['state',\n",
    " state_avgs = locs.loc[state].reset_index()\n",
    " sns.barplot(x='location', y=indicator, data=state_avgs)\n",
    " plt.title(\"Location-wise average for {} in {}\".format(indicator, state))\n",
    " plt.xticks(rotation = 90)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "db00382a-4e46-40ac-917a-1709e14539db",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'location_avgs' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[45], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m location_avgs(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUttar Pradesh\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mno2\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'location_avgs' is not defined"
     ]
    }
   ],
   "source": [
    "location_avgs(\"Uttar Pradesh\", \"no2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a80ba12-5f72-469e-9464-1a38f5d2ecc1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
